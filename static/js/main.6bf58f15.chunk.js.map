{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","alt","src","monster","id","name","email","Cardlist","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","userdata","setState","this","filteredMonsters","filter","toLowerCase","includes","logo","e","target","value","console","log","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,kC,oQCG9BC,G,YAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAY,kBACb,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCHbC,G,MAAW,SAAAR,GAAK,OACzB,yBAAKC,UAAU,aACVD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,UCH/BQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACrB,2BACIb,UAAW,SACXc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC2CHG,E,YA9Cb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXT,SAAU,GACVU,YAAa,IAJH,E,iFAQK,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAQ,OAAI,EAAKC,SAAS,CAAChB,SAAUe,S,+BAGnC,IAAD,SACwBE,KAAKR,MAA7BT,EADA,EACAA,SAASU,EADT,EACSA,YACVQ,EAAmBlB,EAASmB,QAAQ,SAAAxB,GAAO,OAC/CA,EAAQE,KAAKuB,cAAcC,SAASX,EAAYU,kBAGlD,OACE,yBAAK5B,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKE,IAAK4B,IAAM9B,UAAU,WAAWC,IAAI,SACzC,+CAEA,kBAAC,EAAD,CACEW,YAAa,iBACbC,aAAe,SAAAkB,GACb,EAAKP,SAAS,CAACN,YAAaa,EAAEC,OAAOC,QAAQ,kBAC3CC,QAAQC,IAAI,EAAKlB,MAAMC,oBAQ/B,kBAAC,EAAD,CAAUV,SAAUkB,S,GAvCRU,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.6bf58f15.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react'\r\nimport './card.styles.css'\r\n\r\nexport const Card = props => (\r\n    <div className = 'card-container'>\r\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=200x200`}/>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n);","import React from 'react';\r\nimport {Card} from '../card/card.component'\r\nimport './card-list.styles.css'\r\n\r\nexport const Cardlist = props => (\r\n    <div className='card-list'> \r\n        {props.monsters.map(monster => (\r\n            <Card key={monster.id} monster={monster}/>\r\n        ))} \r\n    </div>\r\n);\r\n","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder,handleChange}) => (\r\n    <input \r\n        className= 'search'\r\n        type='search' \r\n        placeholder={placeholder} \r\n        onChange={handleChange}\r\n        />\r\n)","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Cardlist} from './components/card-list/card-list.component'\nimport {SearchBox} from './components/search-box/search-box.component'\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n\ncomponentDidMount() {\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(userdata => this.setState({monsters: userdata}))\n}\n\nrender() {\n  const {monsters,searchField} = this.state;\n  const filteredMonsters = monsters.filter (monster => \n    monster.name.toLowerCase().includes(searchField.toLowerCase())\n  )\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>Monster Rolodex</h1>\n\n        <SearchBox \n          placeholder= 'search monster'\n          handleChange= {e => {\n            this.setState({searchField: e.target.value}, () =>\n              console.log(this.state.searchField)\n            )}\n          }\n        />\n      \n      </header>\n\n\n      <Cardlist monsters={filteredMonsters}></Cardlist>\n      \n\n\n    </div>  \n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}